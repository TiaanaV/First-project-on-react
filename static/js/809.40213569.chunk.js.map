{"version":3,"file":"static/js/809.40213569.chunk.js","mappings":"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","sources":["webpack://first-project-on-reack/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://first-project-on-reack/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://first-project-on-reack/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/Contacts.jsx","components/Profile/ProfileInfo/ProfileInfoData.jsx","components/Profile/ProfileInfo/ProfileInfoDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"headline\":\"MyPosts_headline__hAm9y\",\"newPostArea\":\"MyPosts_newPostArea__rxNoN\",\"buttonsArea\":\"MyPosts_buttonsArea__FNbky\",\"button\":\"MyPosts_button__TKXtI\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\",\"likes\":\"Post_likes__K9KVP\",\"avatarMini\":\"Post_avatarMini__Mvzzx\"};","import React from \"react\";\nimport classes from \"./Post.module.css\";\n\nconst Post = (props) => {\n  return (\n    <div className={classes.item}>\n      <img\n        className={classes.avatarMini}\n        src=\"https://images.unsplash.com/photo-1559190394-df5a28aab5c5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=735&q=80\"\n      />\n      {props.message}\n      <div className={classes.likes}>\n        <span>likes</span> {props.likeCount}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport { Field } from \"redux-form\";\nimport {\n  required,\n  maxLengthCreator,\n} from \"../../../utils/validators/validator\";\nimport { Forms, Textarea } from \"../../common/FormsControl/FormsControl\";\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          component={Textarea}\n          typefield=\"textarea\"\n          name={\"newPostText\"}\n          className={classes.newPostArea}\n          placeholder={\"Post message...\"}\n          validate={[required, maxLength10]}\n        />\n        <div className={classes.buttonsArea}>\n          <button className={classes.button}>Add posts</button>\n          <button className={classes.button}>Remove</button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddPostForm;\n","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport { reduxForm } from \"redux-form\";\nimport AddPostForm from \"./AddPostForm\";\n\nconst AddPostFormRedux = reduxForm({ form: \"my post\" })(AddPostForm);\n\nconst MyPosts = React.memo((props) => {\n  let postsElement = [...props.posts]\n    .reverse()\n    .map((p) => (\n      <Post key={p.id} message={p.message} likeCount={p.likeCount} />\n    ));\n\n  const addNewPost = (value) => {\n    props.addPost(value.newPostText);\n  };\n  return (\n    <div className={classes.postsBlock}>\n      <h3 className={classes.headline}>My posts</h3>\n      <AddPostFormRedux onSubmit={addNewPost} />\n      <div className={classes.posts}>{postsElement}</div>\n    </div>\n  );\n});\n\nexport default MyPosts;\n","import { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { addPostActionCreator } from \"../../../redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText));\n    },\n  };\n};\n\nconst MyPostsContainer = compose(connect(mapStateToProps, mapDispatchToProps))(\n  MyPosts\n);\n\nexport default MyPostsContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"avatar\":\"ProfileInfo_avatar__1VFcV\",\"contacts\":\"ProfileInfo_contacts__hKq1Z\",\"editButton\":\"ProfileInfo_editButton__OVbE2\",\"selectPhotoBlock\":\"ProfileInfo_selectPhotoBlock__eN5Mi\"};","import React, { useEffect, useState } from \"react\";\n\nconst ProfileStatusWithHooks = (props) => {\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <>\n      {!editMode && (\n        <div>\n          <b>Status:</b>\n          <span onDoubleClick={activateEditMode}>\n            {props.status || \"------\"}\n          </span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input\n            onChange={onStatusChange}\n            onBlur={deactivateEditMode}\n            value={status}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import classes from \"./ProfileInfo.module.css\";\nimport React from \"react\";\n\nexport const Contacts = ({ contactTitle, contactValue }) => {\n  return (\n    <div className={classes.contacts}>\n      {contactTitle}:{contactValue}\n    </div>\n  );\n};\n","import React from \"react\";\nimport classes from \"./ProfileInfo.module.css\";\nimport { Contacts } from \"./Contacts\";\n\nconst ProfileInfoData = (props) => {\n  return (\n    <div className={classes.profileInfo}>\n      {props.isOwner && (\n        <div>\n          <button onClick={props.goToEditMode} className={classes.editButton}>\n            Edit\n          </button>\n        </div>\n      )}\n      <div>\n        <b>Name:</b> {props.profile.fullName}\n      </div>\n      <div>\n        <b>About me: </b>\n        {props.profile.aboutMe}\n      </div>\n      <div>\n        <b>Looking for a job: </b>\n        {props.profile.lookingForAJob ? \"Yes\" : \"No\"}\n      </div>\n      {props.profile.lookingForAJob && (\n        <div>\n          <b>My professional skills:</b>\n          {props.profile.lookingForAJobDescription}\n        </div>\n      )}\n      <div>\n        <b>Contacts:</b>\n        {Object.keys(props.profile.contacts).map((key) => {\n          return (\n            <Contacts\n              key={key}\n              contactTitle={key}\n              contactValue={props.profile.contacts[key]}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileInfoData;\n","import React from \"react\";\nimport classes from \"./ProfileInfo.module.css\";\nimport { reduxForm } from \"redux-form\";\nimport {\n  createField,\n  Input,\n  Textarea,\n} from \"../../common/FormsControl/FormsControl\";\nimport style from \"./../../common/FormsControl/FormsControls.module.css\";\n\nconst ProfileInfoDataForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <button>Save</button>\n        {props.error && (\n          <div className={style.formSummaryError}>{props.error}</div>\n        )}\n        <div>\n          <b>Name:</b> {createField(\"Full name\", \"fullName\", [], Input)}\n        </div>\n        <div>\n          <b>About me: </b>\n          {createField(\"Something about you ...\", \"aboutMe\", [], Textarea)}\n        </div>\n        <div>\n          <b>Looking for a job: </b>{\" \"}\n          {createField(\" \", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\n        </div>\n        <div>\n          <b>My professional skills:</b>\n          {createField(\n            \"My professional skills\",\n            \"lookingForAJobDescription\",\n            [],\n            Textarea\n          )}\n        </div>\n\n        <div>\n          <b>Contacts:</b>\n          {Object.keys(props.profile.contacts).map((key) => {\n            return (\n              <div key={key} className={classes.contacts}>\n                <b>{key}:</b>\n                {createField(key, \"contacts.\" + key, [], Input)}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nconst ProfileReduxForm = reduxForm({\n  form: \"profile-edit\",\n  enableReinitialize: true,\n  destroyOnUnmount: false,\n  keepDirtyOnReinitialize: true,\n})(ProfileInfoDataForm);\n\nexport default ProfileReduxForm;\n","import React, { useState } from \"react\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport classes from \"./ProfileInfo.module.css\";\nimport userPhoto from \"../../../assets/images/user-icon.png\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport ProfileInfoData from \"./ProfileInfoData\";\nimport ProfileInfoDataForm from \"./ProfileInfoDataForm\";\n\nconst ProfileInfo = (props) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!props.profile) {\n    return <Preloader />;\n  }\n\n  const onAvatarPhotoSelected = (e) => {\n    if (e.target.files.length) {\n      props.savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = (formDate) => {\n    props.saveProfile(formDate).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      <div className={classes.descriptionBlock}>\n        <img\n          className={classes.avatar}\n          src={props.profile.photos.large || userPhoto}\n        />\n        {props.isOwner && (\n          <form className={classes.selectPhotoBlock}>\n            <input type={\"file\"} onChange={onAvatarPhotoSelected} />\n          </form>\n        )}\n        {editMode ? (\n          <ProfileInfoDataForm\n            initialValues={props.profile}\n            profile={props.profile}\n            onSubmit={onSubmit}\n          />\n        ) : (\n          <ProfileInfoData\n            goToEditMode={() => {\n              setEditMode(true);\n            }}\n            profile={props.profile}\n            isOwner={props.isOwner}\n          />\n        )}\n\n        <ProfileStatusWithHooks\n          status={props.status}\n          updateStatus={props.updateStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import React from \"react\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo\n        savePhoto={props.savePhoto}\n        saveProfile={props.saveProfile}\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {\n  getProfileInfo,\n  getStatus,\n  savePhoto,\n  saveProfile,\n  updateStatus,\n} from \"../../redux/profileReducer\";\nimport Error from \"./../common/Error\";\nimport { connect } from \"react-redux\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = 25786;\n      // this.props.authorizedUserId;\n      // if (!userId) {\n      //   withAuthRedirect();\n      //   // this.props.history.push(\"/login\");\n      // }\n      //25786;\n    }\n    this.props.getProfileInfo(userId);\n\n    // this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n    // if (this.props.error !== null) {\n    //   alert(this.props.error);\n    //   // <Error error={this.props.error} />;\n    // }\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.error ? <Error error={this.props.error} /> : null}\n        <Profile\n          {...this.props}\n          error={this.props.error}\n          isOwner={!this.props.match.params.userId}\n          profile={this.props.profile}\n          status={this.props.status}\n          updateStatus={this.props.updateStatus}\n          savePhoto={this.props.savePhoto}\n        />\n      </>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n  error: state.profilePage.error,\n});\n\nfunction withRouter(Component) {\n  function ComponentWithRouterProp(props) {\n    let location = useLocation();\n    let navigate = useNavigate();\n    let params = useParams();\n    return <Component {...props} match={{ location, navigate, params }} />;\n  }\n\n  return ComponentWithRouterProp;\n}\n\nexport default compose(\n  connect(mapStateToProps, {\n    getProfileInfo,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n  }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer);\n","import React from \"react\";\nimport { Navigate } from \"react-router\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n  });\n\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component{\n        render(){\n            if (!this.props.isAuth) return <Navigate to={\"/login\"} />;\n            return <Component {...this.props} />;\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\n        RedirectComponent \n      );\n    return ConnectedAuthRedirectComponent\n}\n"],"names":["props","className","classes","src","message","likeCount","maxLength10","maxLengthCreator","onSubmit","handleSubmit","Field","component","Textarea","typefield","name","placeholder","validate","required","AddPostFormRedux","reduxForm","form","AddPostForm","React","postsElement","posts","reverse","map","p","id","value","addPost","newPostText","compose","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","Contacts","contactTitle","contactValue","isOwner","onClick","goToEditMode","profile","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","key","enableReinitialize","destroyOnUnmount","keepDirtyOnReinitialize","error","style","createField","Input","type","Preloader","photos","large","userPhoto","target","files","length","savePhoto","initialValues","formDate","saveProfile","then","ProfileContainer","userId","this","match","params","getProfileInfo","refreshProfile","prevProps","prevState","snapshot","Error","authorizedUserId","auth","isAuth","getStatus","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","RedirectComponent","to"],"sourceRoot":""}